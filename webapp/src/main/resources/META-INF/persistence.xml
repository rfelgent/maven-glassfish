<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
    <!--
        must use "JTA" and not "RESOURCE_LOCAL", otherwise glassfish complains
        injecting a @PersistenceContext in a container managed EJB!
      -->
    <persistence-unit name="demoPU" transaction-type="JTA">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <jta-data-source>jdbc/demoDatasource</jta-data-source>
        <properties>
            <!-- have a look at org.hibernate.cfg.AvailableSettings for available property keys -->
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"/>
            <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.hbm2ddl.import_files" value="init.sql"/>
            <!--
                 https://hibernate.atlassian.net/browse/HHH-9446
                 This instructs hibernate not scan for the classes from the GF classloader but rather from webapp classloader!
            -->
            <property name="hibernate.classloading.use_current_tccl_as_parent" value="false"/>
            <!--
                 must tell hibernate to use the JTA feature of the ApplicationServer,
                 otherwise
                    - warning during bootstrapping occurs
                    - exception gets triggered when executing update/delete queries (NPE)
              -->
            <property name="hibernate.transaction.jta.platform" value="org.hibernate.service.jta.platform.internal.SunOneJtaPlatform" />
        </properties>
    </persistence-unit>
</persistence>
