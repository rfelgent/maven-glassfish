<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>de.rfelgent.education</groupId>
        <artifactId>maven-glassfish</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>webapp</artifactId>
    <packaging>war</packaging>

    <properties>
        <glassfish.embedded.tmpDir>${project.build.directory}/glassfish</glassfish.embedded.tmpDir>
    </properties>

    <build>
        <!-- ugly workaround for handling backslashes on Windows OS systems -->
        <resources>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/glassfish</directory>
                <filtering>true</filtering>
                <includes>
                    <include>systemProperties.conf</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <webXml>${project.basedir}/src/main/webapp/WEB-INF/web.xml</webXml>
                    <!-- TODO: who to avoid the copy of "target/classes/systemProperties.conf" to "target/webapp-1.0-SNAPSHOT/WEB-INF/classes/systemProperties.conf -->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.glassfish.embedded</groupId>
                <artifactId>maven-embedded-glassfish-plugin</artifactId>
                <configuration>
                    <!-- not usable on Windows OS systems, as the Properties.load() handles "\" as an escape character :-(
                    <systemProperties>
                        <property>glassfish.embedded.tmpdir=${glassfish.embedded.tmpDir}</property>
                        <property>
                            java.security.auth.login.config=${project.build.sourceDirectory}/../glassfish/login.conf
                        </property>
                    </systemProperties>
                    -->

                    <!-- ugly workaround for handling backslashes on Windows OS systems -->
                    <systemPropertiesFile>${project.build.directory}/classes/systemProperties.conf</systemPropertiesFile>
                    <!--
                        When using the domain.xml a few configuration settings provided by the plugin are dropped, e.g. port.
                        If you use this configuration option, you must have a deep knowledge about GF's domain.xml.

                        The domain.xml created in ${glassfish.embedded.tmpDir} is a good starting point for customizing a domain.xml
                    <configFile>${project.build.sourceDirectory}/../glassfish/domain.xml</configFile>
                    <configFileReadOnly>true</configFileReadOnly>
                     -->
                    <autoDelete>true</autoDelete>
                    <ports>
                        <http-listener>8181</http-listener>
                        <https-listener>8282</https-listener>
                    </ports>
                </configuration>
                <executions>
                    <execution>
                        <id>deploy</id>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                        <phase>none</phase>
                        <!--
                            In earlier versions of this plugin, it was sufficient to declare those things in the "base" configuration!
                            Currently, you are forced to configure deployment specific settings (like "<app>") within the "deploy"-execution!
                          -->
                        <configuration>
                            <app>${project.basedir}/target/${project.build.finalName}/</app>
                            <contextRoot>/demo</contextRoot>
                        </configuration>
                    </execution>
                    <execution>
                        <id>admin</id>
                        <goals>
                            <goal>admin</goal>
                        </goals>
                        <!--
                            This helps to avoid the startup of this plugin during a specific maven life cycle.
                        -->
                        <phase>none</phase>
                        <configuration>
                            <commands>
                                <command>create-auth-realm --classname de.rfelgent.edu.realm.MyRealm --property jaas-context=myRealm:jndi-authentication=global/${project.build.finalName}/AuthenticationService myRealm</command>
                                <command>add-resources ${project.build.sourceDirectory}/../glassfish/glassfish-resources.xml</command>
                            </commands>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <!--
                        Define the embedded GF server via the plugin dependency.
                        Therefore, it is possible to configure the GF plugin with a
                        newer or older version of embedded GF server!
                    -->
                    <dependency>
                        <groupId>org.glassfish.main.extras</groupId>
                        <artifactId>glassfish-embedded-all</artifactId>
                        <version>${glassfish.version}</version>
                    </dependency>
                    <!--
                        GF initializes a realm during startup/bootstrapping ==> GF system classloader !
                      -->
                    <dependency>
                        <groupId>de.rfelgent.education</groupId>
                        <artifactId>realm</artifactId>
                        <version>${project.version}</version>
                    </dependency>
                    <!--
                        Configuring a h2 jdbc resource requires GF to know the jar ==> GF system classloader
                      -->
                    <dependency>
                        <groupId>com.h2database</groupId>
                        <artifactId>h2</artifactId>
                        <version>1.4.188</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>de.rfelgent.education</groupId>
            <artifactId>realm</artifactId>
            <scope>provided</scope>
        </dependency>

        <!--
            although developing against glassfish server, we do not want
            any implementation dependencies in the maven project!
        <dependency>
            <groupId>org.glassfish.main.extras</groupId>
            <artifactId>glassfish-embedded-all</artifactId>
            <version>${glassfish.version}</version>
            <scope>provided</scope>
        </dependency>
          -->

        <!-- useful for debugging the GF plugin itself
        <dependency>
            <groupId>org.glassfish.embedded</groupId>
            <artifactId>maven-embedded-glassfish-plugin</artifactId>
            <version>${glassfish.version}</version>
            <scope>provided</scope>
        </dependency>
        -->

        <!--
            We define the javee 7 api dependency with scope "provided", so you can compile the project,
            but the jar dependencies are not included in the war to create.
            In fact, it is an overhead to include jars in the war when the application server provides those libraries!
          -->
        <dependency>
            <groupId>javax.faces</groupId>
            <artifactId>javax.faces-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
        </dependency>

        <!--
            the "GUI library" primefaces is a nice-to-have feature when developing within jsf framework, but actually not necessary

            known alternatives are:
                - icefaces
                - richfaces
        <dependency>
            <groupId>org.primefaces</groupId>
            <artifactId>primefaces</artifactId>
            <version>5.3</version>
        </dependency>
        -->
    </dependencies>
</project>